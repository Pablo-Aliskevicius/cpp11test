{"changed":true,"filter":false,"title":"FibonacciInConstantTime.cc","tooltip":"/Fibonacci/FibonacciInConstantTime.cc","value":"#include <cstdint> // for uint_fast16_t\n// This header is required, otherwise the compiler optimizes away everything.\n#include \"FibonacciInConstantTime.h\"\n\nnamespace metaprogrammed\n{\n\n    // Template metaprogramming and class enums allow us to compute the Fibonacci series at compile time: O(1)\n    // Before C++11, we couldn't define 64-bit enums. There was a hack (defining a 'static unsigned long long getValue()' function), but it was ugly. \n    template <uint_fast16_t n>\n    struct Fibonacci \n    {\n        // This looks like recursion, but there is a meaningful difference: the compiler computes each value of Fibonacci<>::Element::value only once.\n        enum class Element: ull { value = (ull) Fibonacci<n - 1>::Element::value +  (ull) Fibonacci<n - 2>::Element::value };\n    };\n    // Template specializations, to end the 'recursion'. \n    template <>\n    struct Fibonacci<1u>\n    {\n        enum class Element: ull { value = 1ULL };\n    };\n    template <>\n    struct Fibonacci<0u>\n    {\n        enum class Element: ull { value = 1ULL };\n    };\n    \n    // An array of 93 integers, 64 bits each, takes 744 bytes. They are calculated at _compile_ _time_.\n    // The compiled size of any of the functions (loop, recursion), even if smaller, cannot 'pay' for the run time overhead. \n    // O(1) wins.\n    // The array could also have been initialized with literals downloaded from http://ibiblio.org/pub/docs/books/gutenberg/etext01/fbncc10.txt (among many others)\n    const ull  Values [] = {  \n        (ull) Fibonacci<0>::Element::value,  \n        (ull) Fibonacci<1>::Element::value,  \n        (ull) Fibonacci<2>::Element::value,  \n        (ull) Fibonacci<3>::Element::value,  \n        (ull) Fibonacci<4>::Element::value,  \n        (ull) Fibonacci<5>::Element::value,  \n        (ull) Fibonacci<6>::Element::value,  \n        (ull) Fibonacci<7>::Element::value,  \n        (ull) Fibonacci<8>::Element::value,  \n        (ull) Fibonacci<9>::Element::value,  \n\n        (ull) Fibonacci<10>::Element::value,  \n        (ull) Fibonacci<11>::Element::value,  \n        (ull) Fibonacci<12>::Element::value,  \n        (ull) Fibonacci<13>::Element::value,  \n        (ull) Fibonacci<14>::Element::value,  \n        (ull) Fibonacci<15>::Element::value,  \n        (ull) Fibonacci<16>::Element::value,  \n        (ull) Fibonacci<17>::Element::value,  \n        (ull) Fibonacci<18>::Element::value,  \n        (ull) Fibonacci<19>::Element::value,  \n\n        (ull) Fibonacci<20>::Element::value,  \n        (ull) Fibonacci<21>::Element::value,  \n        (ull) Fibonacci<22>::Element::value,  \n        (ull) Fibonacci<23>::Element::value,  \n        (ull) Fibonacci<24>::Element::value,  \n        (ull) Fibonacci<25>::Element::value,  \n        (ull) Fibonacci<26>::Element::value,  \n        (ull) Fibonacci<27>::Element::value,  \n        (ull) Fibonacci<28>::Element::value,  \n        (ull) Fibonacci<29>::Element::value,  \n\n        (ull) Fibonacci<30>::Element::value,  \n        (ull) Fibonacci<31>::Element::value,  \n        (ull) Fibonacci<32>::Element::value,  \n        (ull) Fibonacci<33>::Element::value,  \n        (ull) Fibonacci<34>::Element::value,  \n        (ull) Fibonacci<35>::Element::value,  \n        (ull) Fibonacci<36>::Element::value,  \n        (ull) Fibonacci<37>::Element::value,  \n        (ull) Fibonacci<38>::Element::value,  \n        (ull) Fibonacci<39>::Element::value,  \n\n        (ull) Fibonacci<40>::Element::value,  \n        (ull) Fibonacci<41>::Element::value,  \n        (ull) Fibonacci<42>::Element::value,  \n        (ull) Fibonacci<43>::Element::value,  \n        (ull) Fibonacci<44>::Element::value,  \n        (ull) Fibonacci<45>::Element::value,  \n        (ull) Fibonacci<46>::Element::value,  \n        (ull) Fibonacci<47>::Element::value,  \n        (ull) Fibonacci<48>::Element::value,  \n        (ull) Fibonacci<49>::Element::value,  \n\n        (ull) Fibonacci<50>::Element::value,  \n        (ull) Fibonacci<51>::Element::value,  \n        (ull) Fibonacci<52>::Element::value,  \n        (ull) Fibonacci<53>::Element::value,  \n        (ull) Fibonacci<54>::Element::value,  \n        (ull) Fibonacci<55>::Element::value,  \n        (ull) Fibonacci<56>::Element::value,  \n        (ull) Fibonacci<57>::Element::value,  \n        (ull) Fibonacci<58>::Element::value,  \n        (ull) Fibonacci<59>::Element::value,  \n\n        (ull) Fibonacci<60>::Element::value,  \n        (ull) Fibonacci<61>::Element::value,  \n        (ull) Fibonacci<62>::Element::value,  \n        (ull) Fibonacci<63>::Element::value,  \n        (ull) Fibonacci<64>::Element::value,  \n        (ull) Fibonacci<65>::Element::value,  \n        (ull) Fibonacci<66>::Element::value,  \n        (ull) Fibonacci<67>::Element::value,  \n        (ull) Fibonacci<68>::Element::value,  \n        (ull) Fibonacci<69>::Element::value,  \n\n        (ull) Fibonacci<70>::Element::value,  \n        (ull) Fibonacci<71>::Element::value,  \n        (ull) Fibonacci<72>::Element::value,  \n        (ull) Fibonacci<73>::Element::value,  \n        (ull) Fibonacci<74>::Element::value,  \n        (ull) Fibonacci<75>::Element::value,  \n        (ull) Fibonacci<76>::Element::value,  \n        (ull) Fibonacci<77>::Element::value,  \n        (ull) Fibonacci<78>::Element::value,  \n        (ull) Fibonacci<79>::Element::value,  \n\n        (ull) Fibonacci<80>::Element::value,  \n        (ull) Fibonacci<81>::Element::value,  \n        (ull) Fibonacci<82>::Element::value,  \n        (ull) Fibonacci<83>::Element::value,  \n        (ull) Fibonacci<84>::Element::value,  \n        (ull) Fibonacci<85>::Element::value,  \n        (ull) Fibonacci<86>::Element::value,  \n        (ull) Fibonacci<87>::Element::value,  \n        (ull) Fibonacci<88>::Element::value,  \n        (ull) Fibonacci<89>::Element::value,  \n\n        (ull) Fibonacci<90>::Element::value,  \n        (ull) Fibonacci<91>::Element::value,  \n        (ull) Fibonacci<92>::Element::value\n    };\n    static_assert(93 == sizeof(Values) / sizeof(Values[0]), \"The size of the array is not the expected (93): there may be a duplicate or missing value.\");   \n}","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":22,"column":24},"end":{"row":22,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1409753905000}